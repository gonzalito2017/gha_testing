name: Security Pipeline


#Código fuente en el repositorio (SAST)	CodeQL, Semgrep, SonarCloud
#Secretos/API Keys en el repo	Gitleaks, TruffleHog
#App web desplegada o localmente	OWASP ZAP



# subir los resultados del escaneo a Code Scanning (la sección “Security → Code scanning alerts” del repo).
permissions:
  actions: read
  contents: read
  security-events: write


on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout del código
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2️⃣ Instalar dependencias para generación de PDF
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive


    # ==========================================================
    # ✅ CODEQL (SAST)
    # ==========================================================
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python # Cambia a python, java, etc. según tu proyecto

    - name: Autobuild project
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python" # Ajusta al lenguaje de tu proyecto


    # ==========================================================
    # ✅ GITLEAKS (Secrets scanning)
    # ==========================================================
    #- name: Run Gitleaks
    #  uses: gitleaks/gitleaks-action@v2
    #  with:
    #    args: detect --source=. --report-path=gitleaks-report.json --verbose

    - name: Run TruffleHog
      run: pip install trufflehog

    - name: Run TruffleHog
      run: |
        trufflehog filesystem --json . > trufflehog-results.json || echo "No secrets found"

    
    # ==========================================================
    # ✅ BANDIT (Python static analysis)
    # ==========================================================
    - name: Install Bandit
      run: pip install bandit

    - name: Run Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true



    # 6️⃣ Generar un PDF consolidando los resultados
    - name: Generate PDF report
      run: |
        echo "# Security Scan Report" > report.md
        echo "Generated on $(date)" >> report.md
        echo " " >> report.md

        echo "## CodeQL Analysis" >> report.md
        if [ -f codeql-results.sarif ]; then
          echo '```json' >> report.md
          cat codeql-results.sarif >> report.md
          echo '```' >> report.md
        else
          echo "No CodeQL results found." >> report.md
        fi

        echo "## trufflehog" >> report.md
        if [ -f trufflehog-results.json ]; then
          echo '```json' >> report.md
          cat trufflehog-results.json >> report.md
          echo '```' >> report.md
        else
          echo "No secrets detected." >> report.md
        fi 

        echo "## Bandit Results" >> report.md
        echo '```json' >> report.md
        cat bandit-report.json >> report.md
        echo '```' >> report.mds

        # Escapar caracteres conflictivos
        sed -i 's/“/"/g; s/”/"/g; s/\\/\\\\/g; s/{/\\{/g; s/}/\\}/g' report.md

        # Generar PDF con xelatex
        pandoc report.md -o security-scan-report.pdf --pdf-engine=xelatex


    # ==========================================================
    # ✅ Upload results as artifacts
    # ==========================================================
    - name: Upload PDF Report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report
        path: security-scan-report.pdf

    - name: Upload Raw JSON Results
      uses: actions/upload-artifact@v4
      with:
        name: raw-scan-results
        path: |
          gitleaks-report.json
          bandit-report.json
          codeql-results.sarif